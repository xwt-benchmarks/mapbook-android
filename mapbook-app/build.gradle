apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.esri.android.mapbook"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        checkTypes {
            javaCompileOptions.annotationProcessorOptions.
                    classNames.add("org.checkerframework.checker.keystore.KeyStoreChecker")
            // Uncomment to do the strongboxbacked checking.
            // javaCompileOptions.annotationProcessorOptions.arguments.put("lint", "strongboxbacked")
        }
    }

    android {
        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }
}

configurations {
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
    }
    errorproneJavac {
        description = 'required to run the Checker Framework.'
    }
}

repositories {
    mavenLocal()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // App's dependencies, including test
    implementation "com.esri.arcgisruntime:arcgis-android:$rootProject.runtimeVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appcompatLibraryVersion"
    implementation "androidx.cardview:cardview:$rootProject.cardviewLibraryVersion"
    implementation "com.google.android.material:material:$rootProject.materialLibraryVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerviewLibraryVersion"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.legacyLibraryVersion"
    implementation "com.google.dagger:dagger:$rootProject.daggerVerison"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVerison"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.espressoCoreVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.runnerVersion"
    androidTestImplementation "androidx.annotation:annotation:$rootProject.annotationVersion"
    androidTestImplementation "com.jayway.android.robotium:robotium-solo:$rootProject.robotiumVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayout"

    ext.checkerFrameworkVersion = '3.0.1'
    annotationProcessor "org.checkerframework:keystore-checker:0.1-SNAPSHOT"
    implementation files("../../../../keystore-checker-qual-android/build/libs/keystore-checker-qual-android.jar")
    checkerFrameworkAnnotatedJDK "org.checkerframework:jdk8:${checkerFrameworkVersion}"
    compileOnly "org.checkerframework:checker-qual-android:${checkerFrameworkVersion}"
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).all { compile ->
        if (compile.name.contains("CheckTypes")) {
//            compile.options.compilerArgs += [
//                    "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
//            ]
            options.fork = true
            options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"]
        }
    }
}
